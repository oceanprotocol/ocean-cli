name: Test Flow

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Run build
        run: npm run build

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Run lint
        run: npm run lint

  test_system:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18.19.0"

      - name: Cache node_modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-test-integration-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-test-integration-${{ env.cache-name }}-

      - name: Set ADDRESS_FILE
        run: echo "ADDRESS_FILE=${HOME}/.ocean/ocean-contracts/artifacts/address.json" >> $GITHUB_ENV

      - name: Checkout Barge
        uses: actions/checkout@v3
        with:
          repository: "oceanprotocol/barge"
          path: "barge"
          ref: "feature/barge_with_node"

      - name: Login to Docker Hub
        if: ${{ env.DOCKERHUB_PASSWORD && env.DOCKERHUB_USERNAME }}
        run: |
          echo "Login to Docker Hub"
          echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Run Barge (Ocean Node enabled)
        working-directory: ${{ github.workspace }}/barge
        run: |
          bash -x start_ocean.sh --no-aquarius --no-provider --no-dashboard --with-typesense 2>&1 > start_ocean.log &

      - run: npm ci
      - run: npm run build
      - run: docker image ls
      - name: Delete default runner images
        run: |
          docker image rm -f node:20
          docker image rm -f node:20-alpine
          docker image rm -f node:18
          docker image rm -f node:18-alpine
          docker image rm -f debian:10
          docker image rm -f debian:11
          docker image rm -f ubuntu:22.04
          docker image rm -f ubuntu:20.04
          docker image rm -f moby/buildkit:latest
          rm -rf /usr/share/swift/

      - name: Wait for services with detailed logging
        working-directory: ${{ github.workspace }}/barge
        run: |
          # Start log tail in background
          tail -f start_ocean.log &
          TAIL_PID=$!

          # Wait for services with status reporting
          for i in {1..50}; do
            echo "=== Check attempt $i/50 ==="
            
            # Check contract deployment
            CONTRACTS_READY=$([ -f "$HOME/.ocean/ocean-contracts/artifacts/ready" ] && echo "yes" || echo "no")
            
            # Check Node container status
            NODE_CONTAINER=$(docker ps -q --filter "name=ocean_node")
            NODE_RUNNING=$([ -n "$NODE_CONTAINER" ] && echo "yes" || echo "no")
            
            # Check Node health endpoint
            NODE_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/health || true)
            
            echo "Contracts ready: $CONTRACTS_READY"
            echo "Node container running: $NODE_RUNNING"
            echo "Node health status: $NODE_HEALTH"
            
            # If container exists but isn't healthy, show logs immediately
            if [ "$NODE_RUNNING" = "yes" ] && [ "$NODE_HEALTH" != "200" ]; then
              echo "Node container found but unhealthy. Current logs:"
              docker logs ocean_node_1 --tail 50 || true
              exit 1
            fi

            # Exit condition
            if [ "$CONTRACTS_READY" = "yes" ] && [ "$NODE_RUNNING" = "yes" ] && [ "$NODE_HEALTH" = "200" ]; then
              echo "All services operational!"
              kill $TAIL_PID
              exit 0
            fi
            
            sleep 10
          done

          # Timeout handling
          echo "!!! Service startup timed out !!!"
          echo "=== Barge startup log ==="
          cat start_ocean.log
          echo "\n=== Node container logs ==="
          docker logs ocean_node_1 --tail 1000 || echo "No node container found"
          echo "\n=== Docker compose status ==="
          docker compose -f docker-compose.yml ps
          exit 1

      - name: Capture failure logs
        if: ${{ failure() }}
        run: |
          echo "=== Full Docker Container List ==="
          docker ps -a
          echo "\n=== Barge Docker Compose Logs ==="
          docker compose -f ${{ github.workspace }}/barge/docker-compose.yml logs --no-color --tail=1000
          echo "\n=== Node Container Logs ==="
          docker logs ocean_node_1 --tail 1000 2>&1 || echo "No node container logs available"
          echo "\n=== Contracts Container Logs ==="
          docker logs ocean_ocean-contracts_1 --tail 1000 2>&1 || echo "No contracts container logs available"
          echo "\n=== C2D Container Logs ==="
          docker logs ocean_computetodata_1 --tail 1000 2>&1 || echo "No C2D container logs available"

      - name: Run system tests
        run: npm run test:system
        env:
          INDEXING_RETRY_INTERVAL: 4000
          INDEXING_MAX_RETRIES: 120
          NODE_URL: "http://127.0.0.1:8001"
          AVOID_LOOP_RUN: true
